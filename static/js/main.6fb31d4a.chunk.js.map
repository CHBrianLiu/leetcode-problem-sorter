{"version":3,"sources":["components/ProblemList/Table.tsx","components/ProblemList/index.tsx","components/Intro/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["classNames","mergeStyleSets","likes","textAlign","COLUMNS","key","name","fieldName","minWidth","maxWidth","isRowHeader","isSorted","isSortedDescending","data","isPadded","onRender","item","Link","href","uri","target","title","isResizable","className","DROPDOWN_OPTIONS","text","selected","Table","props","sortAndCopyItems","useCallback","givenItems","columnKey","isDescending","newItems","slice","sort","a","b","completeItems","useMemo","items","useState","setItems","columns","setColumns","conlumnClickHandler","event","column","newColumns","clickedNewColumn","filter","newColumn","forEach","difficultyFilterChangeHandler","option","index","difficulty","currentSortedColumn","useEffect","onColumnClick","Dropdown","placeholder","label","options","onChange","style","width","ShimmeredDetailsList","selectionMode","SelectionMode","none","enableShimmer","loading","ProblemList","setLoading","csvData","setCsvData","loadCsv","fetch","content","csv","readString","header","length","transformData","record","id","Number","title_slug","dislikes","ratio","toPrecision","isPaidOnly","loadedItems","map","IntroSection","Text","variant","stactStyle","root","padding","marginLeft","marginRight","stackComponentsTokenStyle","childrenGap","App","initializeIcons","Stack","styles","tokens","Intro","Separator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fb31d4a.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Link } from \"@fluentui/react\";\nimport { Dropdown, IDropdownOption } from \"@fluentui/react\";\nimport { IColumn, SelectionMode } from \"@fluentui/react/lib/DetailsList\";\nimport { ShimmeredDetailsList } from \"@fluentui/react/lib/ShimmeredDetailsList\";\nimport { mergeStyleSets } from \"@fluentui/react/lib/Styling\";\n\nexport interface IProblemItem {\n  id: number;\n  title: string;\n  uri: string;\n  likes: number;\n  dislikes: number;\n  ratio: number;\n  difficulty: string;\n  isPaidOnly: boolean;\n}\n\ninterface ITableProps {\n  items: IProblemItem[];\n  loading: boolean;\n}\nconst titleColumnRenderHandler = (item: IProblemItem) => {\n  return (\n    <Link href={`https://leetcode.com${item.uri}/`} target=\"new\">\n      {item.title}\n    </Link>\n  );\n};\n\nconst classNames = mergeStyleSets({\n  likes: {\n    textAlign: \"center\",\n  },\n});\n\nconst COLUMNS: IColumn[] = [\n  {\n    key: \"id\",\n    name: \"ID\",\n    fieldName: \"id\",\n    minWidth: 10,\n    maxWidth: 40,\n    isRowHeader: true,\n    isSorted: true,\n    isSortedDescending: false,\n    data: \"string\",\n    isPadded: true,\n  },\n  {\n    key: \"title\",\n    name: \"Title\",\n    onRender: titleColumnRenderHandler,\n    minWidth: 300,\n    maxWidth: 400,\n    isRowHeader: true,\n    data: \"string\",\n    isPadded: true,\n    isResizable: true,\n  },\n  {\n    key: \"likes\",\n    name: \"Likes\",\n    fieldName: \"likes\",\n    className: classNames.likes,\n    minWidth: 40,\n    maxWidth: 40,\n    isRowHeader: true,\n    data: \"number\",\n    isPadded: true,\n  },\n  {\n    key: \"dislikes\",\n    name: \"Dislikes\",\n    fieldName: \"dislikes\",\n    className: classNames.likes,\n    minWidth: 40,\n    maxWidth: 40,\n    isRowHeader: true,\n    data: \"number\",\n    isPadded: true,\n  },\n  {\n    key: \"ratio\",\n    name: \"Ratio\",\n    fieldName: \"ratio\",\n    className: classNames.likes,\n    minWidth: 40,\n    maxWidth: 40,\n    isRowHeader: true,\n    data: \"number\",\n    isPadded: true,\n  },\n  {\n    key: \"difficulty\",\n    name: \"Difficulty\",\n    fieldName: \"difficulty\",\n    minWidth: 50,\n    maxWidth: 50,\n    isRowHeader: true,\n    data: \"string\",\n    isPadded: true,\n  },\n];\n\nconst DROPDOWN_OPTIONS: IDropdownOption[] = [\n  {\n    key: \"all\",\n    text: \"all\",\n    selected: true,\n  },\n  { key: \"easy\", text: \"easy\" },\n  { key: \"medium\", text: \"medium\" },\n  { key: \"hard\", text: \"hard\" },\n];\n\nconst Table = (props: ITableProps) => {\n  const sortAndCopyItems = useCallback(\n    <T extends unknown>(\n      givenItems: T[],\n      columnKey: string,\n      isDescending: boolean = false\n    ) => {\n      const key = columnKey as keyof T;\n      const newItems = givenItems.slice();\n      newItems.sort((a: T, b: T) =>\n        (isDescending ? a[key] < b[key] : a[key] > b[key]) ? 1 : -1\n      );\n      return newItems;\n    },\n    []\n  );\n\n  const completeItems = useMemo(() => props.items, [props.items]);\n  const [items, setItems] = useState(props.items);\n  const [columns, setColumns] = useState(COLUMNS);\n\n  const conlumnClickHandler = useCallback(\n    (event: React.MouseEvent<HTMLElement>, column: IColumn) => {\n      const newColumns = columns.slice();\n      const clickedNewColumn = newColumns.filter((newColumn: IColumn) => {\n        return column.key === newColumn.key;\n      })[0];\n\n      if (!clickedNewColumn.isSorted) {\n        clickedNewColumn.isSorted = true;\n        clickedNewColumn.isSortedDescending = false;\n        newColumns.forEach((newColumn: IColumn) => {\n          if (!(column.key === newColumn.key)) newColumn.isSorted = false;\n        });\n      } else {\n        clickedNewColumn.isSortedDescending =\n          !clickedNewColumn.isSortedDescending;\n      }\n      const newItems = sortAndCopyItems(\n        items.slice(),\n        clickedNewColumn.key,\n        clickedNewColumn.isSortedDescending\n      );\n      setItems(newItems);\n      setColumns(newColumns);\n    },\n    [columns, items, sortAndCopyItems]\n  );\n\n  const difficultyFilterChangeHandler = useCallback(\n    (\n      event: React.FormEvent<HTMLDivElement>,\n      option?: IDropdownOption,\n      index?: number\n    ) => {\n      if (!option) return;\n      const newItems =\n        option.key === \"all\"\n          ? completeItems.slice()\n          : completeItems.filter(\n              (item: IProblemItem) => option.key === item.difficulty\n            );\n      const currentSortedColumn = columns.filter(\n        (column: IColumn) => column.isSorted\n      )[0];\n      setItems(sortAndCopyItems(\n        newItems,\n        currentSortedColumn.key,\n        currentSortedColumn.isSortedDescending\n      ));\n    },\n    [completeItems, sortAndCopyItems, columns]\n  );\n\n  useEffect(() => {\n    setItems(sortAndCopyItems(props.items, \"id\"));\n  }, [props.items, sortAndCopyItems]);\n\n  columns.forEach((column: IColumn) => {\n    column.onColumnClick = conlumnClickHandler;\n  });\n\n  return (\n    <>\n      <Dropdown\n        placeholder=\"Select an option\"\n        label=\"Difficulty filter\"\n        options={DROPDOWN_OPTIONS}\n        onChange={difficultyFilterChangeHandler}\n        style={{ width: 100 }}\n      />\n      <ShimmeredDetailsList\n        columns={columns}\n        items={items}\n        selectionMode={SelectionMode.none}\n        enableShimmer={props.loading}\n      />\n    </>\n  );\n};\n\nexport default Table;\n","import { useState, useEffect, useCallback } from \"react\";\nimport Table, { IProblemItem } from \"./Table\";\nimport { readString } from \"react-papaparse\";\n\ninterface StatItem {\n  id: string;\n  title: string;\n  title_slug: string;\n  difficulty: string;\n  likes: number;\n  dislikes: number;\n  ratio: number;\n}\n\nconst ProblemList = () => {\n  const [loading, setLoading] = useState(true);\n  const [csvData, setCsvData] = useState([] as IProblemItem[]);\n\n  const loadCsv = useCallback(async () => {\n    const content = await (\n      await fetch(\n        \"https://raw.githubusercontent.com/CHBrianLiu/leetcode-problem-sorter/web/static/list.csv\"\n      )\n    ).text();\n    const csv = readString(content, { header: true });\n    return csv.data.slice(0, csv.data.length - 1) as StatItem[];\n  }, []);\n\n  const transformData = useCallback((record: StatItem): IProblemItem => {\n    return {\n      id: Number(record.id),\n      title: record.title,\n      uri: `/problems/${record.title_slug}`,\n      likes: Number(record.likes),\n      dislikes: Number(record.dislikes),\n      ratio: record.dislikes\n        ? Number((record.likes / record.dislikes).toPrecision(2))\n        : 999,\n      difficulty: record.difficulty,\n      isPaidOnly: false,\n    };\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const loadedItems = await loadCsv();\n      const items = loadedItems.map(transformData);\n      setCsvData(items);\n      setLoading(false);\n    })();\n  }, [transformData, loadCsv]);\n\n  return <Table loading={loading} items={csvData} />;\n};\n\nexport default ProblemList;\n","import { Text } from \"@fluentui/react/lib/Text\";\nimport { Link } from \"@fluentui/react\";\n\nconst IntroSection = () => {\n  return (\n    <>\n      <Text variant=\"xxLargePlus\">\n        Leetcode Problems With Likes and Dislikes\n      </Text>\n      <Text>\n        A convenient entry to Leetcode problems with likes and dislikes helps\n        you focus on superb exercises.\n      </Text>\n      <Text>\n        Because Leetcode's official problem list doesn't provide likes and\n        dislikes besides the titles, we sometimes wrongly pick a bad one which\n        is time-wasting. This page provides you a snapshot of the problems. If\n        you want an up-to-date version of the list, consider using the CLI tool\n        to generate a list in CSV format.\n      </Text>\n      <Link href=\"https://github.com/CHBrianLiu/leetcode-problem-sorter\">\n        CHBrianLiu/leetcode-problem-sorter\n      </Link>\n    </>\n  );\n};\n\nexport default IntroSection;\n","import ProblemList from \"./components/ProblemList\";\nimport IntroSection from \"./components/Intro\";\nimport { Separator } from \"@fluentui/react/lib/Separator\";\nimport { initializeIcons } from \"@fluentui/font-icons-mdl2\";\nimport { Stack, IStackStyles, IStackTokens } from \"@fluentui/react/lib/Stack\";\n\nconst stactStyle: IStackStyles = {\n  root: {\n    padding: 10,\n    maxWidth: 900,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n};\n\nconst stackComponentsTokenStyle: IStackTokens = {\n  childrenGap: 10,\n};\n\nfunction App() {\n  initializeIcons();\n\n  return (\n    <div className=\"App\">\n      <Stack styles={stactStyle} tokens={stackComponentsTokenStyle}>\n        <IntroSection />\n        <Separator />\n        <ProblemList />\n      </Stack>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}